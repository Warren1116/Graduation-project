//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   float4x4 view;                     // Offset:    0 Size:    64
//   float4x4 viewProjection;           // Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// LIFE                     0      w        0     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// LIFE                     0     z         1     NONE   float     z 
//
gs_4_0
dcl_constantbuffer CB0[8], immediateIndexed
dcl_input v[1][0].xyz
dcl_input v[1][0].w
dcl_temps 3
dcl_inputprimitive point 
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.z
dcl_maxout 6
add r0.xyz, -cb0[0].xyzx, cb0[1].xyzx
mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), v[0][0].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[4].xyzw
mov o0.x, r1.x
dp4 r1.x, r0.xyzw, cb0[5].xyzw
mov o0.y, r1.x
dp4 r1.x, r0.xyzw, cb0[6].xyzw
dp4 r0.x, r0.xyzw, cb0[7].xyzw
mov o0.z, r1.x
mov o0.w, r0.x
mov o1.xy, l(0,0,0,0)
mov o1.z, v[0][0].w
emit 
add r0.xyz, cb0[0].xyzx, cb0[1].xyzx
mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), v[0][0].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[4].xyzw
mov o0.x, r1.x
dp4 r1.y, r0.xyzw, cb0[5].xyzw
mov o0.y, r1.y
dp4 r1.z, r0.xyzw, cb0[6].xyzw
dp4 r0.x, r0.xyzw, cb0[7].xyzw
mov o0.z, r1.z
mov o0.w, r0.x
mov o1.xy, l(1.000000,0,0,0)
mov o1.z, v[0][0].w
emit 
add r0.yzw, -cb0[0].xxyz, -cb0[1].xxyz
mad r2.xyz, r0.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000), v[0][0].xyzx
mov r2.w, l(1.000000)
dp4 r0.y, r2.xyzw, cb0[4].xyzw
mov o0.x, r0.y
dp4 r0.z, r2.xyzw, cb0[5].xyzw
mov o0.y, r0.z
dp4 r0.w, r2.xyzw, cb0[6].xyzw
dp4 r1.w, r2.xyzw, cb0[7].xyzw
mov o0.z, r0.w
mov o0.w, r1.w
mov o1.xy, l(0,1.000000,0,0)
mov o1.z, v[0][0].w
emit 
mov o0.x, r0.y
mov o0.y, r0.z
mov o0.z, r0.w
mov o0.w, r1.w
mov o1.xy, l(0,1.000000,0,0)
mov o1.z, v[0][0].w
emit 
mov o0.x, r1.x
mov o0.y, r1.y
mov o0.z, r1.z
mov o0.w, r0.x
mov o1.xy, l(1.000000,0,0,0)
mov o1.z, v[0][0].w
emit 
add r0.xyz, cb0[0].xyzx, -cb0[1].xyzx
mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), v[0][0].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[4].xyzw
mov o0.x, r1.x
dp4 r1.x, r0.xyzw, cb0[5].xyzw
mov o0.y, r1.x
dp4 r1.x, r0.xyzw, cb0[6].xyzw
dp4 r0.x, r0.xyzw, cb0[7].xyzw
mov o0.z, r1.x
mov o0.w, r0.x
mov o1.xy, l(1.000000,1.000000,0,0)
mov o1.z, v[0][0].w
emit 
cut 
ret 
// Approximately 72 instruction slots used
