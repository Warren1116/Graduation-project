//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBFinalpass
// {
//
//   float4 screenSize;                 // Offset:    0 Size:    16 [unused]
//   float4 viewPosition;               // Offset:   16 Size:    16
//   row_major float4x4 view;           // Offset:   32 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:   96 Size:    64 [unused]
//   row_major float4x4 inverseView;    // Offset:  160 Size:    64
//   row_major float4x4 inverseProjection;// Offset:  224 Size:    64
//   float hueShift;                    // Offset:  288 Size:     4
//   float saturation;                  // Offset:  292 Size:     4
//   float brightness;                  // Offset:  296 Size:     4
//   float colorGradiationDummy;        // Offset:  300 Size:     4 [unused]
//
// }
//
// cbuffer CBFog
// {
//
//   float3 fogColor;                   // Offset:    0 Size:    12
//   float fogDensity;                  // Offset:   12 Size:     4
//   float fogHeightFalloff;            // Offset:   16 Size:     4 [unused]
//   float fogCutoffDistance;           // Offset:   20 Size:     4
//   float groundLevel;                 // Offset:   24 Size:     4
//   float dummy;                       // Offset:   28 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sceneSampler                      sampler      NA          NA             s0      1 
// sceneTexture                      texture  float4          2d             t0      1 
// bloomTexture                      texture  float4          2d             t1      1 
// DepthMap                          texture   float          2d             t2      1 
// CBFinalpass                       cbuffer      NA          NA            cb0      1 
// CBFog                             cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// DEPTH                    0     z         2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[19], immediateIndexed
dcl_constantbuffer CB1[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.color.x; v1.y <- pin.color.y; v1.z <- pin.color.z; v1.w <- pin.color.w; 
//   v2.x <- pin.texcoord.x; v2.y <- pin.texcoord.y; v2.z <- pin.depth; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 50 "C:\Users\2220012\Desktop\Graduation-project\HLSL\FinalpassPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, v1.xyzw  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 53
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t1.xyzw, s0
add r1.xyz, r0.xyzx, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 56
sample_indexable(texture2d)(float,float,float,float) r1.w, v2.xyxx, t2.yzwx, s0
mov r1.w, r1.w  // r1.w <- depth

#line 59
itof r2.x, l(1)  // r2.x <- ndc.w
mov r2.yz, v2.xxyx  // r2.y <- ndc.x; r2.z <- ndc.y
mov r1.w, r1.w  // r1.w <- ndc.z

#line 60
itof r2.w, l(2)
mul r2.y, r2.w, r2.y
itof r2.w, l(1)
mov r2.w, -r2.w
add r2.y, r2.w, r2.y  // r2.y <- ndc.x

#line 61
itof r2.w, l(-2)
mul r2.z, r2.w, r2.z
itof r2.w, l(1)
add r2.z, r2.w, r2.z  // r2.z <- ndc.y

#line 62
mul r3.xyzw, cb0[10].xyzw, cb0[14].xxxx
mul r4.xyzw, cb0[11].xyzw, cb0[14].yyyy
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[12].xyzw, cb0[14].zzzz
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[13].xyzw, cb0[14].wwww
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[10].xyzw, cb0[15].xxxx
mul r5.xyzw, cb0[11].xyzw, cb0[15].yyyy
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[12].xyzw, cb0[15].zzzz
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[13].xyzw, cb0[15].wwww
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[10].xyzw, cb0[16].xxxx
mul r6.xyzw, cb0[11].xyzw, cb0[16].yyyy
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[12].xyzw, cb0[16].zzzz
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[13].xyzw, cb0[16].wwww
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[10].xyzw, cb0[17].xxxx
mul r7.xyzw, cb0[11].xyzw, cb0[17].yyyy
add r6.xyzw, r6.xyzw, r7.xyzw
mul r7.xyzw, cb0[12].xyzw, cb0[17].zzzz
add r6.xyzw, r6.xyzw, r7.xyzw
mul r7.xyzw, cb0[13].xyzw, cb0[17].wwww
add r6.xyzw, r6.xyzw, r7.xyzw
mul r3.xyzw, r2.yyyy, r3.xyzw
mul r4.xyzw, r2.zzzz, r4.xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, r1.wwww, r5.xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r2.xyzw, r2.xxxx, r6.xyzw
add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- pos.x; r2.y <- pos.y; r2.z <- pos.z; r2.w <- pos.w

#line 63
div r2.xyz, r2.xyzx, r2.wwww

#line 65
mov r3.xyz, -cb0[1].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
sqrt r1.w, r1.w

#line 69
nop 
mov r2.x, cb1[0].w
mov r1.w, r1.w
mov r2.y, cb1[1].z
mov r2.z, cb0[1].y

#line 17
mov r2.y, -r2.y
add r2.y, r2.y, r2.z  // r2.y <- verticalDistance

#line 19
mov r2.z, l(0)  // r2.z <- fogFactor

#line 21
itof r2.w, l(0)
lt r2.w, r2.w, r2.y
if_nz r2.w

#line 24
  mov r2.x, -r2.x
  mul r2.x, r2.y, r2.x
  mul r2.x, r2.x, l(1.442695)
  exp r2.x, r2.x
  mov r2.x, -r2.x
  add r2.x, r2.x, l(1.000000)
  max r2.x, r2.x, l(0.000000)  // r2.x <- fogFactor

#line 26
  itof r2.y, l(1)
  mov r1.w, -r1.w
  add r1.w, r1.w, cb1[1].y
  div r1.w, r1.w, cb1[1].y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)
  mov r1.w, -r1.w
  add r1.w, r1.w, r2.y
  mul r2.z, r1.w, r2.x  // r2.z <- fogFactor

#line 28
endif 

#line 29
mov r2.z, r2.z  // r2.z <- <ComputeFogFactor return value>

#line 69
mov r2.z, r2.z  // r2.z <- fogFactor

#line 72
nop 
mov r1.xyz, r1.xyzx
mov r0.w, r0.w
mov r2.xyw, cb1[0].xyxz
mov r2.z, r2.z

#line 36
mov r3.xyz, -r1.xyzx
add r2.xyw, r2.xyxw, r3.xyxz
mul r2.xyz, r2.xywx, r2.zzzz
add r0.xyz, r1.xyzx, r2.xyzx  // r0.x <- blendedColor.x; r0.y <- blendedColor.y; r0.z <- blendedColor.z

#line 38
mov r0.xyz, r0.xyzx  // r0.x <- <ApplyFog return value>.x; r0.y <- <ApplyFog return value>.y; r0.z <- <ApplyFog return value>.z
mov r0.w, r0.w  // r0.w <- <ApplyFog return value>.w

#line 72
mov r0.xyzw, r0.xyzw  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 77
nop 
mov r0.xyz, r0.xyzx

#line 7 "C:\Users\2220012\Desktop\Graduation-project\HLSL\FilterFunctions.hlsli"
itof r1.x, l(0)  // r1.x <- hsv.x

#line 9
max r1.w, r0.z, r0.y
max r1.z, r0.x, r1.w  // r1.z <- Vmax

#line 10
min r1.w, r0.z, r0.y
min r1.w, r0.x, r1.w  // r1.w <- Vmin

#line 13
mov r1.w, -r1.w
add r1.w, r1.w, r1.z  // r1.w <- delta

#line 16
mov r1.z, r1.z  // r1.z <- hsv.z

#line 19
div r2.x, r1.w, r1.z
itof r2.y, l(0)
ge r2.y, r1.z, r2.y
movc r2.y, r2.y, l(1.000000), l(0)
mul r1.y, r2.y, r2.x  // r1.y <- hsv.y

#line 22
lt r2.x, l(0.000000), r1.y
if_nz r2.x

#line 24
  eq r2.x, r0.x, r1.z
  if_nz r2.x

#line 26
    itof r2.x, l(60)
    mov r2.y, -r0.z
    add r2.y, r0.y, r2.y
    div r2.y, r2.y, r1.w
    mul r1.x, r2.y, r2.x

#line 27
  else 

#line 28
    eq r2.x, r0.y, r1.z
    if_nz r2.x

#line 30
      itof r2.x, l(60)
      mov r2.y, -r0.x
      add r0.z, r0.z, r2.y
      div r0.z, r0.z, r1.w
      mul r0.z, r0.z, r2.x
      itof r2.x, l(120)
      add r1.x, r0.z, r2.x

#line 31
    else   // Prior locations: r0.z <- color.z; r0.z <- rgb.z

#line 34
      itof r0.z, l(60)
      mov r0.y, -r0.y
      add r0.x, r0.y, r0.x
      div r0.x, r0.x, r1.w
      mul r0.x, r0.x, r0.z
      itof r0.y, l(240)
      add r1.x, r0.y, r0.x

#line 35
    endif 
  endif 

#line 36
  itof r0.x, l(0)
  lt r0.x, r1.x, r0.x
  if_nz r0.x

#line 38
    itof r0.x, l(360)
    add r1.x, r0.x, r1.x

#line 39
  endif 

#line 40
endif 

#line 41
mov r1.x, r1.x  // r1.x <- <RGB2HSV return value>.x
mov r1.y, r1.y  // r1.y <- <RGB2HSV return value>.y
mov r1.z, r1.z  // r1.z <- <RGB2HSV return value>.z

#line 77 "C:\Users\2220012\Desktop\Graduation-project\HLSL\FinalpassPS.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 80
add r0.x, r1.x, cb0[18].x  // r0.x <- color.x

#line 83
mul r0.y, r1.y, cb0[18].y  // r0.y <- color.y

#line 86
mul r0.z, r1.z, cb0[18].z  // r0.z <- color.z

#line 89
nop 
mov r0.x, r0.x
mov r0.y, r0.y
mov r0.z, r0.z

#line 50 "C:\Users\2220012\Desktop\Graduation-project\HLSL\FilterFunctions.hlsli"
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- rgb.x; r1.y <- rgb.y; r1.z <- rgb.z

#line 51
itof r1.w, l(0)
eq r1.w, r0.y, r1.w
if_nz r1.w

#line 54
  mov r1.z, r0.z
  mov r1.y, r1.z
  mov r1.x, r1.y

#line 55
else 

#line 59
  mov r0.z, r0.z  // r0.z <- Vmax

#line 61
  itof r1.w, l(360)
  mul r2.x, r0.x, r1.w
  mov r2.y, -r2.x
  ge r2.x, r2.x, r2.y
  mov r2.y, -r1.w
  movc r1.w, r2.x, r1.w, r2.y
  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
  mul r0.x, r0.x, r2.x
  frc r0.x, r0.x
  mul r0.x, r0.x, r1.w  // r0.x <- hsv.x

#line 62
  itof r1.w, l(60)
  div r1.w, r0.x, r1.w
  ftoi r1.w, r1.w
  itof r1.w, r1.w  // r1.w <- Huei

#line 63
  itof r2.x, l(60)
  div r0.x, r0.x, r2.x
  mov r2.x, -r1.w
  add r0.x, r0.x, r2.x  // r0.x <- Huef

#line 64
  mov r2.x, -r0.y
  add r2.x, r2.x, l(1.000000)
  mul r2.x, r0.z, r2.x  // r2.x <- p

#line 65
  mul r2.y, r0.x, r0.y
  mov r2.y, -r2.y
  add r2.y, r2.y, l(1.000000)
  mul r2.y, r0.z, r2.y  // r2.y <- q

#line 66
  itof r2.z, l(1)
  mov r0.x, -r0.x
  add r0.x, r0.x, r2.z
  mul r0.x, r0.x, r0.y
  mov r0.x, -r0.x
  add r0.x, r0.x, l(1.000000)
  mul r0.x, r0.x, r0.z  // r0.x <- t

#line 67
  itof r0.y, l(0)
  eq r0.y, r0.y, r1.w
  if_nz r0.y

#line 69
    mov r1.x, r0.z

#line 70
    mov r1.y, r0.x

#line 71
    mov r1.z, r2.x

#line 72
  else 

#line 73
    itof r0.y, l(1)
    eq r0.y, r0.y, r1.w
    if_nz r0.y

#line 75
      mov r1.x, r2.y

#line 76
      mov r1.y, r0.z

#line 77
      mov r1.z, r2.x

#line 78
    else 

#line 79
      itof r0.y, l(2)
      eq r0.y, r0.y, r1.w
      if_nz r0.y

#line 81
        mov r1.x, r2.x

#line 82
        mov r1.y, r0.z

#line 83
        mov r1.z, r0.x

#line 84
      else 

#line 85
        itof r0.y, l(3)
        eq r0.y, r0.y, r1.w
        if_nz r0.y

#line 87
          mov r1.x, r2.x

#line 88
          mov r1.y, r2.y

#line 89
          mov r1.z, r0.z

#line 90
        else 

#line 91
          itof r0.y, l(4)
          eq r0.y, r0.y, r1.w
          if_nz r0.y

#line 93
            mov r1.x, r0.x

#line 94
            mov r1.y, r2.x

#line 95
            mov r1.z, r0.z

#line 96
          else 

#line 97
            itof r0.x, l(5)
            eq r0.x, r0.x, r1.w
            if_nz r0.x

#line 99
              mov r1.x, r0.z

#line 100
              mov r1.y, r2.x

#line 101
              mov r1.z, r2.y

#line 102
            endif 
          endif 
        endif 
      endif 
    endif 
  endif 

#line 103
endif 

#line 104
mov r1.xyz, r1.xyzx  // r1.x <- <HSV2RGB return value>.x; r1.y <- <HSV2RGB return value>.y; r1.z <- <HSV2RGB return value>.z

#line 89 "C:\Users\2220012\Desktop\Graduation-project\HLSL\FinalpassPS.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 92
mov o0.xyz, r1.xyzx
mov o0.w, r0.w
ret 
// Approximately 256 instruction slots used
