//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   float4 viewPosition;               // Offset:    0 Size:    16
//   row_major float4x4 viewProjection; // Offset:   16 Size:    64 [unused]
//   float4 lightDirection;             // Offset:   80 Size:    16 [unused]
//   row_major float4x4 projection;     // Offset:   96 Size:    64 [unused]
//   row_major float4x4 inverseView;    // Offset:  160 Size:    64
//   row_major float4x4 inverseProjection;// Offset:  224 Size:    64
//
// }
//
// cbuffer CBFog
// {
//
//   float3 fogColor;                   // Offset:    0 Size:    12
//   float fogDensity;                  // Offset:   12 Size:     4
//   float fogHeightFalloff;            // Offset:   16 Size:     4 [unused]
//   float fogCutoffDistance;           // Offset:   20 Size:     4
//   float groundLevel;                 // Offset:   24 Size:     4
//   float dummy;                       // Offset:   28 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// diffuseMapSamplerState            sampler      NA          NA             s0      1 
// diffuseMap                        texture  float4          2d             t0      1 
// DepthMap                          texture   float          2d             t1      1 
// CbScene                           cbuffer      NA          NA            cb0      1 
// CBFog                             cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[18], immediateIndexed
dcl_constantbuffer CB3[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   v2.x <- pin.color.x; v2.y <- pin.color.y; v2.z <- pin.color.z; v2.w <- pin.color.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 46 "C:\Users\2220012\Desktop\Graduation-project\HLSL\LambertPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, v2.xyzw  // r0.x <- diffuseColor.x; r0.y <- diffuseColor.y; r0.z <- diffuseColor.z; r0.w <- diffuseColor.w

#line 51
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t1.xyzw, s0
mov r1.x, r1.x  // r1.x <- depth

#line 54
itof r1.y, l(1)  // r1.y <- ndc.w
mov r1.zw, v1.xxxy  // r1.z <- ndc.x; r1.w <- ndc.y
mov r1.x, r1.x  // r1.x <- ndc.z

#line 55
itof r2.x, l(2)
mul r1.z, r1.z, r2.x
itof r2.x, l(1)
mov r2.x, -r2.x
add r1.z, r1.z, r2.x  // r1.z <- ndc.x

#line 56
itof r2.x, l(-2)
mul r1.w, r1.w, r2.x
itof r2.x, l(1)
add r1.w, r1.w, r2.x  // r1.w <- ndc.y

#line 57
mul r2.xyzw, cb0[10].xyzw, cb0[14].xxxx
mul r3.xyzw, cb0[11].xyzw, cb0[14].yyyy
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[12].xyzw, cb0[14].zzzz
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[13].xyzw, cb0[14].wwww
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[10].xyzw, cb0[15].xxxx
mul r4.xyzw, cb0[11].xyzw, cb0[15].yyyy
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[12].xyzw, cb0[15].zzzz
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[13].xyzw, cb0[15].wwww
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[10].xyzw, cb0[16].xxxx
mul r5.xyzw, cb0[11].xyzw, cb0[16].yyyy
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[12].xyzw, cb0[16].zzzz
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[13].xyzw, cb0[16].wwww
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[10].xyzw, cb0[17].xxxx
mul r6.xyzw, cb0[11].xyzw, cb0[17].yyyy
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[12].xyzw, cb0[17].zzzz
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[13].xyzw, cb0[17].wwww
add r5.xyzw, r5.xyzw, r6.xyzw
mul r2.xyzw, r1.zzzz, r2.xyzw
mul r3.xyzw, r1.wwww, r3.xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r1.xxxx, r4.xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r1.xyzw, r1.yyyy, r5.xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- pos.x; r1.y <- pos.y; r1.z <- pos.z; r1.w <- pos.w

#line 58
div r1.xyz, r1.xyzx, r1.wwww

#line 60
mov r2.xyz, -cb0[0].xyzx
add r1.xyz, r1.xyzx, r2.xyzx
dp3 r1.x, r1.xyzx, r1.xyzx
sqrt r1.x, r1.x  // r1.x <- depth

#line 62
nop 
mov r1.y, cb3[0].w
mov r1.x, r1.x
mov r1.z, cb3[1].z
mov r1.w, cb0[0].y

#line 12
mov r1.z, -r1.z
add r1.z, r1.z, r1.w  // r1.z <- verticalDistance

#line 14
mov r1.w, l(0)  // r1.w <- fogFactor

#line 16
itof r2.x, l(0)
lt r2.x, r2.x, r1.z
if_nz r2.x

#line 22
  mov r1.y, -r1.y
  mul r1.y, r1.z, r1.y
  mul r1.y, r1.y, l(1.442695)
  exp r1.y, r1.y
  mov r1.y, -r1.y
  add r1.y, r1.y, l(1.000000)
  max r1.y, r1.y, l(0.000000)  // r1.y <- fogFactor

#line 24
  itof r1.z, l(1)
  mov r1.x, -r1.x
  add r1.x, r1.x, cb3[1].y
  div r1.x, r1.x, cb3[1].y
  max r1.x, r1.x, l(0.000000)
  min r1.x, r1.x, l(1.000000)
  mov r1.x, -r1.x
  add r1.x, r1.x, r1.z
  mul r1.w, r1.x, r1.y  // r1.w <- fogFactor

#line 26
endif 

#line 27
mov r1.w, r1.w  // r1.w <- <ComputeFogFactor return value>

#line 62
mov r1.w, r1.w  // r1.w <- fogFactor

#line 64
nop 
mov r0.xyzw, r0.xyzw
mov r1.xyz, cb3[0].xyzx
mov r1.w, r1.w

#line 32
mov r2.xyz, -r0.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r1.xyz, r1.xyzx, r1.wwww
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- blendedColor.x; r0.y <- blendedColor.y; r0.z <- blendedColor.z

#line 34
mov r0.xyz, r0.xyzx  // r0.x <- <ApplyFog return value>.x; r0.y <- <ApplyFog return value>.y; r0.z <- <ApplyFog return value>.z
mov r0.w, r0.w  // r0.w <- <ApplyFog return value>.w

#line 64
mov r0.xyzw, r0.xyzw  // r0.x <- diffuseColor.x; r0.y <- diffuseColor.y; r0.z <- diffuseColor.z

#line 67
mov o0.xyzw, r0.xyzw
ret 
// Approximately 99 instruction slots used
