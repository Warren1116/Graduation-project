#pragma once
#include "Graphics/Model.h"
#include "Enemy.h"
#include "StateMachine.h"
#include "Telegram.h"

#define USESTATEMACHINE3

// エネミーアニメーション
enum class EnemyAnimation
{
	IdleNormal,
	IdleBattle,
	Attack01,
	Attack02,
	WalkFWD,
	WalkBWD,
	WalkLeft,
	WalkRight,
	RunFWD,
	SenseSomethingST,
	SenseSomethingRPT,
	Taunt,
	Victory,
	GetHit,
	Dizzy,
	Die,
};

class StateMachine;

class EnemyPeople :public Enemy
{
public:
	EnemyPeople();
	~EnemyPeople()override;

	// 更新処理
	void Update(float elapsedTime)override;

	//// 描画処理
	//void Render(ID3D11DeviceContext* dc, Shader* shader)override;

	// デバッグプリミティブ描画
	void DrawDebugPrimitive() override;

	// 縄張り設定
	void SetTerritory(const DirectX::XMFLOAT3& origin, float range);

	// デバッグエネミー情報表示
	void DrawDebugGUI();
	// ターゲット位置をランダム設定
	void SetRandomTargetPosition();

	// 目標地点へ移動
	void MoveToTarget(float elapsedTime, float speedRate);

	// プレイヤー索敵
	bool SearchPlayer();

	// ターゲットポジション設定
	void SetTargetPosition(DirectX::XMFLOAT3 position) { targetPosition = position; }

	// ターゲットポジション取得
	DirectX::XMFLOAT3 GetTargetPosition() { return targetPosition; }

	// ポジション取得
	DirectX::XMFLOAT3 GetPosition() { return position; }

	// ステートタイマー設定
	void SetStateTimer(float timer) {
		stateTimer = timer;
	}
	// ステートタイマー取得
	float GetStateTimer() { return stateTimer; }

	// 攻撃範囲取得
	float GetAttackRange() { return attackRange; }

	//2週目
	//ステートマシン取得
	StateMachine* GetStateMachine() { return stateMachine; }
	//モデル取得
	Model* GetModel() { return model; }

	//	5週目　
	//TODO 05_02 メッセージ受信関数を追加
	bool OnMessage(const Telegram& msg);

private:

	// 徘徊ステートへ遷移
	void TransitionWanderState();

	// 徘徊ステート更新処理
	void UpdateWanderState(float elapsedTime);

	// 待機ステートへ遷移
	void TransitionIdleState();

	// 待機ステート更新処理
	void UpdateIdleState(float elapsedTime);

	// 追跡ステートへ遷移
	void TransitionPursuitState();

	// 追跡ステート更新処理
	void UpdatePursuitState(float elapsedTime);

	// 攻撃ステートへ遷移
	void TransitionAttackState();

	// 攻撃ステート更新処理
	void UpdateAttackState(float elapsedTime);
protected:
	void OnDead();

	// TODO 01 必要なステートをenum classで準備しなさい。
	// （Wanderのみ記述済み）
	//TODO 02_01 他クラスからenum class Stateにアクセスできるように修飾子を変更
	//private:
public:
#ifdef USESTATEMACHINE3

	enum class State
	{
		Search,
		Battle,
		//	TODO 05_02 MetaAIからメッセージを受信したときのステートを追加
		Recieve,
	};

	enum class Search
	{
		Wander,
		Idle,
	};

	enum class Battle
	{
		Pursuit,
		Attack,
		//TODO 05_02 戦闘中に攻撃権を持っていないときの処理を追加
		Standby,
	};

	//TODO 05_02 MetaAIを経由して他のエネミーから呼ばれたときの処理
	enum class Recieve
	{
		Called,
	};

#endif // USESTATEMACHINE3
	float				stateTimer = 0.0f;



private:
	Model* model = nullptr;
#ifdef USESTATEMACHINE2
	State				state = State::Wander;
#endif // USESTATEMACHINE2

#ifdef USESTATEMACHINE3
	State				state = State::Search;
#endif // USESTATEMACHINE2

	DirectX::XMFLOAT3	targetPosition = { 0.0f,0.0f,0.0f };
	DirectX::XMFLOAT3	territoryOrigin = { 0.0f,0.0f,0.0f };
	float				territoryRange = 10.0f;
	float				moveSpeed = 3.0f;
	float				turnSpeed = DirectX::XMConvertToRadians(360);

	float				searchRange = 5.0f;
	float				attackRange = 1.5f;
	//2週目追加
	StateMachine* stateMachine = nullptr;
};